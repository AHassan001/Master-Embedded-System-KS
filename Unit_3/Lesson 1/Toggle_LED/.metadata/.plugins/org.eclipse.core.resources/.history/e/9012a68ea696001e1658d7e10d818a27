/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */
#include "platform_type.h"

#define RCC_B_A		0x40021000
#define GPIOA_B_A 	0x40010800

#define RCC_APB2ENR_B_A  	(vuint32_t *)(RCC_B_A + 0x18)  	      // bit 2  (IOPAEN)
#define GPIOA_CRH_B_A 		(vuint32_t *)(GPIOA_B_A + 0x04)       //access from 20 to 23 =2
#define GPIOA_ODR_B_A    	(vuint32_t *)(GPIOA_B_A + 0x0c)       // pin 13 = 1 or 0

#define RCC_IOPAEN 	(1<<2)

typedef union
{
	vuint32_t 	  All_Pins;

	struct
	{
		vuint32_t reserved:13;
		vuint32_t pin13:1;
	}Pins;

}R_ODR_t;

volatile R_ODR_t* R_ODR = (volatile R_ODR_t*) GPIOA_ODR_B_A;

int main(void)
{
    /* Loop forever */

	int i=0;

	RCC_APB2ENR_B_A |= RCC_IOPAEN; 		//set bit 2 to 1 to enable RCC to GPIOA

	GPIOA_CRH_B_A &= 0xFF0FFFFF;		// clear bits from bit 20 to 23
	GPIOA_CRH_B_A |= 0x00200000;		// set bits 21 to 1

	for(;;)
	{
		R_ODR -> Pins.pin13 = 1;
		for(i=0;i<5000;i++);
		R_ODR -> Pins.pin13 = 0;
		for(i=0;i<5000;i++);

	}
}
